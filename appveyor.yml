
# Set-ItemProperty is a workaround :
# A command that prompts the user failed because the host program or the command type does not support user interaction.
# Même session PS pour Install et Build
install:
  - ps: |

          Write-host "$($PSversiontable|out-string)"
          Write-host "exist ? $(Test-Path variable:profile)"
        #   Write-host "1 AllUsersAllHosts   '$($profile.AllUsersAllHosts)'"
        #   Write-host "1 AllUsersCurrentHost '$($profile.AllUsersCurrentHost)'"
        #   Write-host "1 CurrentUserAllHosts '$($profile.CurrentUserAllHosts)'"
        #   Write-host "1 CurrentUserCurrentHost '$($profile.CurrentUserCurrentHost)'"

          Set-ItemProperty -Name DisablePromptToUpdateHelp -Value 1 -path 'HKLM:\SOFTWARE\Microsoft\PowerShell'

          #nouvelle session pour installer PowershellGet
          PowerShell.exe -Command {
            Install-PackageProvider Nuget -ForceBootstrap -Force > $null
            Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
            # La version livrée avec PS ne provient pas d'un repository,
            # on force l'installation à partir de PS Gallery
            Install-module PowershellGet -MinimumVersion 1.1.0.0 -Force -Scope AllUsers
            Export-Clixml -InputObject $Profile  -Path  $env:temp\PSProfile.xml }

nuget:
  account_feed: true
  project_feed: true

build_script:
   - ps: |

          #$S="$([Environment]::GetFolderPath([Environment+SpecialFolder]::Personal))\WindowsPowerShell\Microsoft.PowerShell_profile.ps1"
          #Appveyor semble utiliser un runspace et pas une session PS
         #$profile=New-object PSObject -argumentlist $s
         #Add-member -inputObject Profile -membertype noteproperty -name CurrentUserAllHosts  -value $s
         $Profile=Import-Clixml $env:temp\PSProfile.xml

         Write-host "After create. Exist ? $(Test-Path variable:profile)"
         $Profile|select *
         Install-Module Psake  -force
         Import-Module Psake
         . '.\Install.ps1'
         Write-Host "Call Publish task"
                                #todo type release/debug ?
         . '.\Publish.ps1' -Dev #todo repo name ?

# test_script:
#   - ps: |

        # $ResultsFile="$env:Temp\PSScriptAnalyzerRulesPester.xml"
        # $Results = Invoke-Pester  -OutputFormat NUnitXml -OutputFile $ResultsFile -PassThru
        # $ReportFile="$env:Temp\ParameterSetRules-TestsReport.html"
        # &"$Env:Temp\ReportUnit.1.2.1\tools\ReportUnit.exe" $ResultsFile $ReportFile
        # Push-AppveyorArtifact $ReportFile
        # if ($Results.FailedCount -gt 0) {
        #     throw "$($ruleTestResults.FailedCount) tests failed."
        # }

# Upload the project as a zip archive
# on_finish:
#   - ps: |
        # Add-AppveyorTest -Name "Finish" -Outcome Running
        # $zipFile = "$env:Temp\PSScriptAnalyzerRules.zip"
        # Push-AppveyorArtifact $zipFile

